com.crossoverjie.concurrent.CustomThreadPool	[com.crossoverjie.concurrent.CustomThreadPool::java.util.concurrent.locks.ReentrantLock lock, com.crossoverjie.concurrent.CustomThreadPool::long keepAliveTime, com.crossoverjie.concurrent.CustomThreadPool::java.util.concurrent.TimeUnit unit, com.crossoverjie.concurrent.CustomThreadPool::int miniSize, com.crossoverjie.concurrent.CustomThreadPool::java.util.concurrent.BlockingQueue<java.lang.Runnable> workQueue, com.crossoverjie.concurrent.CustomThreadPool::java.util.concurrent.atomic.AtomicBoolean isShutDown, com.crossoverjie.concurrent.CustomThreadPool::shutdown():void, com.crossoverjie.concurrent.CustomThreadPool::shutDownNow():void, com.crossoverjie.concurrent.CustomThreadPool::tryClose(boolean):void, com.crossoverjie.concurrent.CustomThreadPool::java.util.concurrent.atomic.AtomicInteger totalTask, com.crossoverjie.concurrent.CustomThreadPool::java.util.Set<com.crossoverjie.concurrent.CustomThreadPool.Worker> workers, com.crossoverjie.concurrent.CustomThreadPool::getWorkerCount():int, com.crossoverjie.concurrent.CustomThreadPool::addWorker(java.lang.Runnable):void, com.crossoverjie.concurrent.CustomThreadPool::closeAllTask():void, com.crossoverjie.concurrent.CustomThreadPool::execute(java.lang.Runnable):void, com.crossoverjie.concurrent.CustomThreadPool::getTask():java.lang.Runnable, com.crossoverjie.concurrent.CustomThreadPool::int maxSize, com.crossoverjie.concurrent.CustomThreadPool::submit(com.crossoverjie.concurrent.future.Callable<T>):com.crossoverjie.concurrent.future.Future<T>]
com.crossoverjie.concurrent.CustomThreadPool	[com.crossoverjie.concurrent.CustomThreadPool::java.util.concurrent.locks.ReentrantLock lock, com.crossoverjie.concurrent.CustomThreadPool::long keepAliveTime, com.crossoverjie.concurrent.CustomThreadPool::java.util.concurrent.TimeUnit unit, com.crossoverjie.concurrent.CustomThreadPool::int miniSize, com.crossoverjie.concurrent.CustomThreadPool::java.util.concurrent.BlockingQueue<java.lang.Runnable> workQueue, com.crossoverjie.concurrent.CustomThreadPool::java.util.concurrent.atomic.AtomicBoolean isShutDown, com.crossoverjie.concurrent.CustomThreadPool::shutdown():void, com.crossoverjie.concurrent.CustomThreadPool::shutDownNow():void, com.crossoverjie.concurrent.CustomThreadPool::tryClose(boolean):void, com.crossoverjie.concurrent.CustomThreadPool::java.util.concurrent.atomic.AtomicInteger totalTask, com.crossoverjie.concurrent.CustomThreadPool::java.util.Set<com.crossoverjie.concurrent.CustomThreadPool.Worker> workers, com.crossoverjie.concurrent.CustomThreadPool::getWorkerCount():int, com.crossoverjie.concurrent.CustomThreadPool::addWorker(java.lang.Runnable):void, com.crossoverjie.concurrent.CustomThreadPool::closeAllTask():void, com.crossoverjie.concurrent.CustomThreadPool::execute(java.lang.Runnable):void, com.crossoverjie.concurrent.CustomThreadPool::getTask():java.lang.Runnable]
com.crossoverjie.concurrent.CustomThreadPool	[com.crossoverjie.concurrent.CustomThreadPool::java.util.concurrent.atomic.AtomicBoolean isShutDown, com.crossoverjie.concurrent.CustomThreadPool::shutdown():void, com.crossoverjie.concurrent.CustomThreadPool::shutDownNow():void, com.crossoverjie.concurrent.CustomThreadPool::tryClose(boolean):void, com.crossoverjie.concurrent.CustomThreadPool::java.util.concurrent.atomic.AtomicInteger totalTask]
com.crossoverjie.concurrent.CustomThreadPool	[com.crossoverjie.concurrent.CustomThreadPool::java.lang.Object shutDownNotify, com.crossoverjie.concurrent.CustomThreadPool::mainNotify():void, com.crossoverjie.concurrent.CustomThreadPool::com.crossoverjie.concurrent.communication.Notify notify]
com.crossoverjie.concurrent.CustomThreadPool.Worker	[com.crossoverjie.concurrent.CustomThreadPool.Worker::java.lang.Thread thread, com.crossoverjie.concurrent.CustomThreadPool.Worker::startTask():void, com.crossoverjie.concurrent.CustomThreadPool.Worker::close():void]
